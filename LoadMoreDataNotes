1. Inspect fecth and responses: 
async function fetchProducts() {
    try {
        setLoading(true);
        const response = await fetch(
            `https://dummyjson.com/products?limit=20&skip=${count === 0 ? 0 : count * 20}`
        );
        
        const text = await response.text(); // Get the raw response as text
        console.log(text);  // Check what is being returned

        const result = JSON.parse(text); // Manually parse if you want to check
        if (result && result.products && result.products.length) {
            setProducts((prevData) => [...prevData, ...result.products]);
        }
        setLoading(false);
    } catch (e) {
        console.log(e);
        setLoading(false);
    }
}


// -------------------------------------------------------------------------------------------------
Let's break down this code step-by-step to help you understand it. This is a React functional component that fetches product data from an API and allows the user to load more products when clicking a button. It also displays loading and disabled states based on the progress.

### 1. Importing React and other necessary things
```javascript
import React, { useEffect, useState } from 'react'; 
import './style.css';
```
- `useState` and `useEffect` are React hooks that let you manage state and side effects in functional components.
- `useState` is for setting and tracking values like "loading" or "products".
- `useEffect` runs code when certain conditions change, like when the component first loads or the `count` changes.
- `'./style.css'` is importing a CSS file for styling.

### 2. Initializing State
```javascript
const [Loading, setLoading] = useState(false);
const [products, setProducts] = useState([]);
const [count, setCount] = useState(0);
const [dissableButton, setDissableButton] = useState(false);
```
- `Loading`: Tracks if the app is currently loading data.
- `products`: Holds an array of products fetched from the API.
- `count`: Keeps track of how many times the user has clicked the "Load More" button.
- `dissableButton`: Controls whether the "Load More" button is disabled after loading 100 products.

### 3. Fetching Products from API
```javascript
async function fetchProducts() {
    try {
        setLoading(true);
        const response = await fetch(
            `https://dummyjson.com/products?limit=20&skip=${count === 0 ? 0 : count * 20}`
        );
```
- This is an asynchronous function to fetch product data.
- `fetch` is called with a URL to get the product data. The `limit=20` means it fetches 20 products at a time.
- The `skip` parameter controls the offset (how many products to skip). `count * 20` is used to get the next set of products when the button is clicked.

```javascript
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const result = await response.json();
```
- Checks if the API request was successful. If not, it throws an error.
- If successful, it converts the response into a JSON object.

```javascript
        if(result && result.products && result.products.length) { 
            setProducts((prevData) =>[...prevData, ...result.products]);
        }
        setLoading(false);
        console.log(result);
    } catch (e) {
        console.log(e);
        setLoading(false);
    }
}
```
- If products are received, the `setProducts` function adds them to the existing list of products.
- It then sets `Loading` to `false` to stop showing the loading message.
- If there's an error during the fetch, it logs the error and sets `Loading` to `false`.

### 4. Using `useEffect` to Fetch Data on Count Change
```javascript
useEffect(() => {
    fetchProducts();
},[count]);
```
- This `useEffect` hook runs `fetchProducts` every time the `count` changes (i.e., when the user clicks the "Load More" button).

### 5. Checking if the Button Should be Disabled
```javascript
useEffect(()=>{
    if(products && products.length == 100) setDissableButton(true)
});
```
- This `useEffect` hook checks if the total number of products has reached 100. If it has, it disables the "Load More" button by setting `dissableButton` to `true`.

### 6. Loading State
```javascript
if(Loading){
    return (
        <div>
            <h1>Loading Data Please Wait...</h1>
        </div>
    );
}
```
- While the data is being loaded, a message `"Loading Data Please Wait..."` is shown.

### 7. Rendering Products
```javascript
return (
    <div className="load-more-container">
       <div className="product-container">
            {
                products && products.length 
                ? products.map( (item) =>
                 <div className="product" key={item.id}>
                     <img
                      src={item.thumbnail}
                      alt={item.title}
                     /> 
                    <p>{item.title} </p>
                </div>)
                : null
            }
       </div>
```
- The `products` array is mapped over, and for each product, it creates a `div` with an image and title.
- `key={item.id}` ensures that React can efficiently track and update each product.

### 8. Load More Button
```javascript
<div className='button-container'>
    <button disabled={dissableButton} onClick={()=> setCount(count + 1)}>Load More..</button>
    {
        dissableButton 
        ? <p>Reached 100 products</p>
        : null
    }
</div>
```
- A button is rendered to load more products. The button is disabled if `dissableButton` is `true`.
- If the button is disabled (when 100 products have been reached), a message `"Reached 100 products"` is shown below the button.

### Final Notes:
- This code provides a simple implementation for a "Load More" button that fetches data from an API and displays products.
- It uses React state to manage loading, the product list, and whether the button is enabled or disabled.
- It also handles asynchronous API requests with `async/await`.

Does that help clarify things? Let me know if you need more details on any part!
